diff --git a/Makefile b/Makefile
index 18306f7..c9237fa 100644
--- a/Makefile
+++ b/Makefile
@@ -1,8 +1,8 @@
 include .env
 export
 
-TAG := $(or $(TAG),latest)
-ASSISTED_INSTALLER_AGENT := $(or $(ASSISTED_INSTALLER_AGENT),quay.io/ocpmetal/assisted-installer-agent:$(TAG))
+TAG := $(or $(TAG),swarm)
+ASSISTED_INSTALLER_AGENT := $(or $(ASSISTED_INSTALLER_AGENT),quay.io/otuchfel/assisted-installer-agent:$(TAG))
 
 export ROOT_DIR = $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))
 BIN = $(ROOT_DIR)/build
@@ -36,7 +36,7 @@ build-%: $(BIN) src/$* #lint
 	CGO_ENABLED=0 go build -o $(BIN)/$* src/$*/main/main.go
 
 build-image: unit-test
-	docker build ${CONTAINER_BUILD_PARAMS} -f Dockerfile.assisted_installer_agent . -t $(ASSISTED_INSTALLER_AGENT)
+	podman build ${CONTAINER_BUILD_PARAMS} -f Dockerfile.assisted_installer_agent . -t $(ASSISTED_INSTALLER_AGENT)
 
 push: build-image subsystem
 	docker push $(ASSISTED_INSTALLER_AGENT)
diff --git a/src/agent/main/main.go b/src/agent/main/main.go
index 9e4dce5..8a142c6 100644
--- a/src/agent/main/main.go
+++ b/src/agent/main/main.go
@@ -2,6 +2,7 @@ package main
 
 import (
 	"time"
+	"fmt"
 
 	"github.com/openshift/assisted-installer-agent/src/commands"
 	"github.com/openshift/assisted-installer-agent/src/config"
@@ -23,6 +24,8 @@ func main() {
 			continue
 		}
 
+		stepRunnerCommand.Args = append(stepRunnerCommand.Args, fmt.Sprintf("--force-mac=%s", config.GlobalAgentConfig.ForceMac))
+
 		if err := commands.StartStepRunner(stepRunnerCommand.Command, stepRunnerCommand.Args...); err != nil {
 
 			var reRegistrerDelay time.Duration
diff --git a/src/commands/service_api.go b/src/commands/service_api.go
index 164106c..425385d 100644
--- a/src/commands/service_api.go
+++ b/src/commands/service_api.go
@@ -3,7 +3,6 @@ package commands
 import (
 	"github.com/go-openapi/strfmt"
 	"github.com/openshift/assisted-installer-agent/src/config"
-	"github.com/openshift/assisted-installer-agent/src/scanners"
 	"github.com/openshift/assisted-installer-agent/src/session"
 	"github.com/openshift/assisted-service/client/installer"
 	"github.com/openshift/assisted-service/models"
@@ -18,11 +17,12 @@ type serviceAPI interface {
 type v2ServiceAPI struct{}
 
 func (v *v2ServiceAPI) RegisterHost(s *session.InventorySession) (*models.HostRegistrationResponse, error) {
+    hostID := strfmt.UUID(config.GlobalAgentConfig.HostID)
 	params := &installer.V2RegisterHostParams{
 		InfraEnvID:            strfmt.UUID(config.GlobalAgentConfig.InfraEnvID),
 		DiscoveryAgentVersion: &config.GlobalAgentConfig.AgentVersion,
 		NewHostParams: &models.HostCreateParams{
-			HostID:                scanners.ReadId(scanners.NewGHWSerialDiscovery()),
+			HostID:                &hostID,
 			DiscoveryAgentVersion: config.GlobalAgentConfig.AgentVersion,
 		},
 	}
diff --git a/src/config/agent_config.go b/src/config/agent_config.go
index 668ec11..01be4e8 100644
--- a/src/config/agent_config.go
+++ b/src/config/agent_config.go
@@ -14,6 +14,7 @@ var GlobalAgentConfig struct {
 	ConnectivityConfig
 	IntervalSecs int
 	HostID       string
+	ForceMac     string
 	LoggingConfig
 }
 
@@ -33,6 +34,7 @@ func ProcessArgs() {
 	flag.StringVar(&ret.CACertificatePath, "cacert", "", "Path to custom CA certificate in PEM format")
 	flag.BoolVar(&ret.InsecureConnection, "insecure", false, "Do not validate TLS certificate")
 	flag.StringVar(&ret.HostID, "host-id", "", "Host identification")
+	flag.StringVar(&ret.ForceMac, "force-mac", "", "Force agent to report a particular mac address in its first network interface")
 	h := flag.Bool("help", false, "Help message")
 	flag.Parse()
 	if h != nil && *h {
diff --git a/src/disk_speed_check/disk_speed_check.go b/src/disk_speed_check/disk_speed_check.go
index 7ef32e3..94cdee0 100644
--- a/src/disk_speed_check/disk_speed_check.go
+++ b/src/disk_speed_check/disk_speed_check.go
@@ -51,33 +51,33 @@ func (p *DiskSpeedCheck) getDiskPerf(path string) (int64, error) {
 		return -1, errors.New("Missing disk path")
 	}
 
-	args := []string{"--filename", path, "--name=test", "--rw=write", "--ioengine=sync",
-		"--size=22m", "-bs=2300", "--fdatasync=1", "--output-format=json"}
-	stdout, stderr, exitCode := p.dependecies.Execute("fio", args...)
-	if exitCode != 0 {
-		return -1, errors.Errorf("Could not get I/O performance for path %s: (fio exit code %d) %s",
-			path, exitCode, stderr)
-	}
-
-	type FIO struct {
-		Jobs []struct {
-			Sync struct {
-				LatNs struct {
-					Percentile struct {
-						Nine9_000000 int64 `json:"99.000000"`
-					} `json:"percentile"`
-				} `json:"lat_ns"`
-			} `json:"sync"`
-		} `json:"jobs"`
-	}
-
-	fio := FIO{}
-	err := json.Unmarshal([]byte(stdout), &fio)
-	if err != nil {
-		return -1, errors.Errorf("Failed to get sync duration from I/O info for path %s", path)
-	}
-	syncDurationInNS := fio.Jobs[0].Sync.LatNs.Percentile.Nine9_000000
-	return time.Duration(syncDurationInNS).Milliseconds(), nil
+	// args := []string{"--filename", path, "--name=test", "--rw=write", "--ioengine=sync",
+	// 	"--size=22m", "-bs=2300", "--fdatasync=1", "--output-format=json"}
+	// stdout, stderr, exitCode := p.dependecies.Execute("fio", args...)
+	// if exitCode != 0 {
+	// 	return -1, errors.Errorf("Could not get I/O performance for path %s: (fio exit code %d) %s",
+	// 		path, exitCode, stderr)
+	// }
+
+	// type FIO struct {
+	// 	Jobs []struct {
+	// 		Sync struct {
+	// 			LatNs struct {
+	// 				Percentile struct {
+	// 					Nine9_000000 int64 `json:"99.000000"`
+	// 				} `json:"percentile"`
+	// 			} `json:"lat_ns"`
+	// 		} `json:"sync"`
+	// 	} `json:"jobs"`
+	// }
+
+	// fio := FIO{}
+	// err := json.Unmarshal([]byte(stdout), &fio)
+	// if err != nil {
+	// 	return -1, errors.Errorf("Failed to get sync duration from I/O info for path %s", path)
+	// }
+	// syncDurationInNS := fio.Jobs[0].Sync.LatNs.Percentile.Nine9_000000
+	return time.Duration(1000).Milliseconds(), nil
 }
 
 func createResponse(ioSyncDuration int64, path string) string {
diff --git a/src/inventory/disks.go b/src/inventory/disks.go
index 4535d27..574a2c6 100644
--- a/src/inventory/disks.go
+++ b/src/inventory/disks.go
@@ -125,9 +125,9 @@ func (d *disks) getSMART(path string) string {
 	// We ignore the exit code and stderr because stderr is empty and
 	// stdout contains the exit code in `--json=c` mode. Whatever the exit
 	// code is, we want to relay the information to the service
-	stdout, _, _ := d.dependencies.Execute("smartctl", "--xall", "--json=c", path)
+	// stdout, _, _ := d.dependencies.Execute("smartctl", "--xall", "--json=c", path)
 
-	return stdout
+	return `{"json_format_version":[1,0],"smartctl":{"version":[7,1],"svn_revision":"5022","platform_info":"x86_64-linux-5.14.0-60.fc35.x86_64","build_info":"(local build)","argv":["smartctl","--xall","--json=c","/dev/vda"],"messages":[{"string":"/dev/vda: Unable to detect device type","severity":"error"}],"exit_status":1}}`
 }
 
 func unknownToEmpty(value string) string {
diff --git a/src/inventory/interfaces.go b/src/inventory/interfaces.go
index c4b8c87..a4c833a 100644
--- a/src/inventory/interfaces.go
+++ b/src/inventory/interfaces.go
@@ -81,22 +81,33 @@ func getFlags(flags net.Flags) []string {
 	}
 }
 
-func (i *interfaces) getInterfaces() []*models.Interface {
+func (i *interfaces) getInterfaces(forceMac string) []*models.Interface {
 	ret := make([]*models.Interface, 0)
 	ins, err := i.dependencies.Interfaces()
 	if err != nil {
 		logrus.WithError(err).Warnf("Retrieving interfaces")
 		return ret
 	}
+
+    interfacesFound := 0
 	for _, in := range ins {
 		if !(in.IsPhysical() || in.IsBonding() || in.IsVlan()) {
 			continue
 		}
+
+        macAddress := in.HardwareAddr().String()
+		if interfacesFound == 0 && forceMac != "" {
+		    // If the user requested it, override the mac address of the first interface to the
+		    // mac address configured by the user
+            macAddress = forceMac
+        }
+
+        interfacesFound += 1
 		rec := models.Interface{
 			HasCarrier:    i.hasCarrier(in.Name()),
 			IPV4Addresses: make([]string, 0),
 			IPV6Addresses: make([]string, 0),
-			MacAddress:    in.HardwareAddr().String(),
+			MacAddress:    macAddress,
 			Name:          in.Name(),
 			Mtu:           int64(in.MTU()),
 			Biosdevname:   i.getBiosDevname(in.Name()),
@@ -128,8 +139,8 @@ func (i *interfaces) getInterfaces() []*models.Interface {
 	return ret
 }
 
-func GetInterfaces(dependencies util.IDependencies) []*models.Interface {
-	return newInterfaces(dependencies).getInterfaces()
+func GetInterfaces(dependencies util.IDependencies, forceMac string) []*models.Interface {
+	return newInterfaces(dependencies).getInterfaces(forceMac)
 }
 
 func setV6PrefixesForAddresses(interfaces []*models.Interface, dependencies util.IDependencies) {
diff --git a/src/inventory/inventory.go b/src/inventory/inventory.go
index b12d8d7..7c8cd35 100644
--- a/src/inventory/inventory.go
+++ b/src/inventory/inventory.go
@@ -8,7 +8,7 @@ import (
 	"github.com/openshift/assisted-service/models"
 )
 
-func ReadInventory() *models.Inventory {
+func ReadInventory(forceMac string) *models.Inventory {
 	d := util.NewDependencies()
 	ret := models.Inventory{
 		BmcAddress:   GetBmcAddress(d),
@@ -18,7 +18,7 @@ func ReadInventory() *models.Inventory {
 		Disks:        GetDisks(d),
 		Gpus:         GetGPUs(d),
 		Hostname:     GetHostname(d),
-		Interfaces:   GetInterfaces(d),
+		Interfaces:   GetInterfaces(d, forceMac),
 		Memory:       GetMemory(d),
 		SystemVendor: GetVendor(d),
 		Timestamp:    time.Now().Unix(),
@@ -28,8 +28,8 @@ func ReadInventory() *models.Inventory {
 	return &ret
 }
 
-func CreateInventoryInfo() []byte {
-	in := ReadInventory()
+func CreateInventoryInfo(forceMac string) []byte {
+	in := ReadInventory(forceMac)
 	b, _ := json.Marshal(&in)
 	return b
 }
diff --git a/src/inventory/main/main.go b/src/inventory/main/main.go
index 1a49789..8ff3dab 100644
--- a/src/inventory/main/main.go
+++ b/src/inventory/main/main.go
@@ -1,6 +1,7 @@
 package main
 
 import (
+	"flag"
 	"fmt"
 
 	"github.com/openshift/assisted-installer-agent/src/config"
@@ -8,8 +9,23 @@ import (
 	"github.com/openshift/assisted-installer-agent/src/util"
 )
 
+type Config struct {
+	ForceMac string
+}
+
+var executableConfig Config
+
+func processArgs() {
+	ret := &executableConfig
+	flag.StringVar(&ret.ForceMac, "force-mac", "", "Force agent to report a particular mac address in its first network interface")
+	flag.Parse()
+}
+
 func main() {
+	processArgs()
 	config.ProcessSubprocessArgs(config.DefaultLoggingConfig)
+
 	util.SetLogging("inventory", config.SubprocessConfig.TextLogging, config.SubprocessConfig.JournalLogging)
-	fmt.Print(string(inventory.CreateInventoryInfo()))
+
+	fmt.Print(string(inventory.CreateInventoryInfo(executableConfig.ForceMac)))
 }
diff --git a/src/ntp_synchronizer/main/main.go b/src/ntp_synchronizer/main/main.go
index 3ca68f0..621b96e 100644
--- a/src/ntp_synchronizer/main/main.go
+++ b/src/ntp_synchronizer/main/main.go
@@ -6,18 +6,22 @@ import (
 	"os"
 
 	"github.com/openshift/assisted-installer-agent/src/config"
-	"github.com/openshift/assisted-installer-agent/src/ntp_synchronizer"
+	// "github.com/openshift/assisted-installer-agent/src/ntp_synchronizer"
 	"github.com/openshift/assisted-installer-agent/src/util"
 	log "github.com/sirupsen/logrus"
 )
 
+func swarm_ntp() (string, string, int) {
+    return `{"ntp_sources": []}`, "", 0
+}
+
 func main() {
 	config.ProcessSubprocessArgs(config.DefaultLoggingConfig)
 	util.SetLogging("ntp_synchronizer", config.SubprocessConfig.TextLogging, config.SubprocessConfig.JournalLogging)
 	if flag.NArg() != 1 {
 		log.Fatalf("Expecting exactly single argument to ntp_synchronizer. Received %d", len(os.Args)-1)
 	}
-	stdout, stderr, exitCode := ntp_synchronizer.Run(flag.Arg(0), &ntp_synchronizer.ProcessExecuter{}, log.StandardLogger())
+	stdout, stderr, exitCode := swarm_ntp()// ntp_synchronizer.Run(flag.Arg(0), &ntp_synchronizer.ProcessExecuter{}, log.StandardLogger())
 	fmt.Fprint(os.Stdout, stdout)
 	fmt.Fprint(os.Stderr, stderr)
 	os.Exit(exitCode)
diff --git a/src/util/execute.go b/src/util/execute.go
index 03ac92d..9418138 100644
--- a/src/util/execute.go
+++ b/src/util/execute.go
@@ -9,6 +9,7 @@ import (
 
 	"github.com/hashicorp/go-multierror"
 	log "github.com/sirupsen/logrus"
+    "github.com/openshift/assisted-installer-agent/src/config"
 )
 
 const TimeoutExitCode = 124
@@ -36,11 +37,29 @@ func getErrorStr(err error, stderr *bytes2.Buffer) string {
 }
 
 func Execute(command string, args ...string) (stdout string, stderr string, exitCode int) {
+    // Avoid destroying disks
+    for i := 0; i < len(args); i++ {
+        if strings.Contains(args[i], "dd if=") {
+            args[i] = strings.Replace(args[i], "dd if=", "true if=", 1)
+        }
+    }
+
+    // Force mac address in the inventory command
+    for i := 0; i < len(args); i++ {
+        if strings.HasSuffix(args[i], "inventory") {
+            args[i] = fmt.Sprintf("%s --force-mac=%s", args[i], config.GlobalAgentConfig.ForceMac)
+        }
+    }
+
 	cmd := exec.Command(command, args...)
 	var stdoutBytes, stderrBytes bytes2.Buffer
 	cmd.Stdout = &stdoutBytes
 	cmd.Stderr = &stderrBytes
-	err := cmd.Run()
+
+	log.Infof("@@@@@@@@@@@@@@@@@@@@@@@@@@ %v %+v", command, strings.Join(args, " ^ "))
+
+    err := cmd.Run()
+
 	return stdoutBytes.String(), getErrorStr(err, &stderrBytes), getExitCode(err)
 }
 
@@ -90,7 +109,7 @@ func ExecuteShell(command string) (stdout string, stderr string, exitCode int) {
 
 func ExecutePrivileged(command string, args ...string) (stdout string, stderr string, exitCode int) {
 	commandBase := "nsenter"
-	arguments := []string{"-t", "1", "-m", "-i", "-n", "--", command}
+	arguments := []string{"-t", "1", "-C", "-m", "-i", "-n", "--", command}
 	arguments = append(arguments, args...)
 	return Execute(commandBase, arguments...)
 }
