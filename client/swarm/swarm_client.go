// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the swarm client
type API interface {
	/*
	   CreateNewAgent creates new agent*/
	CreateNewAgent(ctx context.Context, params *CreateNewAgentParams) (*CreateNewAgentCreated, error)
	/*
	   DeleteAgent deletes agent*/
	DeleteAgent(ctx context.Context, params *DeleteAgentParams) (*DeleteAgentNoContent, error)
	/*
	   Exit exits the process*/
	Exit(ctx context.Context, params *ExitParams) (*ExitNoContent, error)
	/*
	   GetAgent gets specific agent*/
	GetAgent(ctx context.Context, params *GetAgentParams) (*GetAgentOK, error)
	/*
	   Health healths check*/
	Health(ctx context.Context, params *HealthParams) (*HealthNoContent, error)
	/*
	   ListAgents lists all running agents*/
	ListAgents(ctx context.Context, params *ListAgentsParams) (*ListAgentsOK, error)
}

// New creates a new swarm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for swarm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateNewAgent creates new agent
*/
func (a *Client) CreateNewAgent(ctx context.Context, params *CreateNewAgentParams) (*CreateNewAgentCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateNewAgent",
		Method:             "POST",
		PathPattern:        "/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNewAgentReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNewAgentCreated), nil

}

/*
DeleteAgent deletes agent
*/
func (a *Client) DeleteAgent(ctx context.Context, params *DeleteAgentParams) (*DeleteAgentNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAgent",
		Method:             "DELETE",
		PathPattern:        "/agents/{agent_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAgentReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAgentNoContent), nil

}

/*
Exit exits the process
*/
func (a *Client) Exit(ctx context.Context, params *ExitParams) (*ExitNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Exit",
		Method:             "GET",
		PathPattern:        "/exit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExitReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExitNoContent), nil

}

/*
GetAgent gets specific agent
*/
func (a *Client) GetAgent(ctx context.Context, params *GetAgentParams) (*GetAgentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAgent",
		Method:             "GET",
		PathPattern:        "/agents/{agent_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAgentReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAgentOK), nil

}

/*
Health healths check
*/
func (a *Client) Health(ctx context.Context, params *HealthParams) (*HealthNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Health",
		Method:             "GET",
		PathPattern:        "/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HealthNoContent), nil

}

/*
ListAgents lists all running agents
*/
func (a *Client) ListAgents(ctx context.Context, params *ListAgentsParams) (*ListAgentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAgents",
		Method:             "GET",
		PathPattern:        "/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAgentsReader{formats: a.formats},
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAgentsOK), nil

}
